@mixin mix-colors($default, $states) {
    color: $states;
    background-color: $default;

    &:hover {
        background-color: mix(
            $default,
            $states,
            opacity(sys("state", "hover", "state-layer-opacity"))
        );
    }

    &:focus {
        background-color: mix(
            $default,
            $states,
            opacity(sys("state", "focus", "state-layer-opacity"))
        );
    }

    &:active {
        background-color: mix(
            $default,
            $states,
            opacity(sys("state", "pressed", "state-layer-opacity"))
        );
    }
}

@mixin elevation($elevation) {
    $offset: sys("elevation", "level#{$elevation}");
    box-shadow: rgba(theme("shadow"), 0.2) 0 $offset floor($offset * 1.5) 0;
}

@mixin indicator($color) {
    box-shadow: inset 0px sys("components", "tabs", "indicator-height") * -1 0px
        0px $color;
}

@mixin style-toggled($disabled-overrides: ()) {
    &:disabled {
        @if (not map-has-key($disabled-overrides, "background-color")) {
            background-color: rgba(
                theme("on-surface"),
                sys("state", "disabled", "container-opacity")
            );
        }

        @if (not map-has-key($disabled-overrides, "color")) {
            color: rgba(
                theme("on-surface"),
                sys("state", "disabled", "label-opacity")
            );
        }

        @if ($disabled-overrides) {
            @each $property, $value in $disabled-overrides {
                #{$property}: #{$value};
            }
        }
    }

    &:not(:disabled) {
        @content;
    }
}
