@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "functions" as *;
@use "sys" as *;
@use "ref" as *;
@use "../themes";

@mixin container-backgrounds {
    $backgrounds: (
        "primary": "primary-container",
        "secondary": "secondary-container",
        "tertiary": "tertiary-container",
        "error": "error-container",
        "surface": "surface",
        "surface-container": "surface-container",
    );

    @each $name, $value in $backgrounds {
        @include data("background", $name) {
            @include themes.colorify($value);
        }
    }
}

// ensures prefix on all data attributes
@mixin data($name, $values...) {
    $selector: "";

    @if length($values) > 0 {
        @each $value in $values {
            $selector: $selector + "&[data-md-#{$name}='#{$value}'],";
        }
    } @else {
        $selector: "&[data-md-#{$name}],";
    }

    #{$selector} {
        @content;
    }
}

@mixin divider {
    border-bottom: 1px solid themes.color("outline-variant");
}

@mixin elevation($elevation, $negative-offset: false) {
    $offset: sys("elevation", "level#{$elevation}");

    box-shadow: rgba(themes.color("shadow"), 0.2) 0
        if($negative-offset, -$offset, $offset) math.floor($offset * 1.5) 0;
}

// TODO: change to data type?
@mixin font($type) {
    &--large {
        @include font-styling("#{$type}-large");
    }

    &--medium {
        @include font-styling("#{$type}-medium");
    }

    &--small {
        @include font-styling("#{$type}-small");
    }
}

@mixin font-styling(
    $typescale,
    $prominent: false,
    $mono: false,
    $overrides: ()
) {
    $font: sys("typescale", $typescale);

    @if not map.has-key($overrides, "font-family") {
        @if $mono {
            font-family: "#{ref("typeface", "mono")}";
        } @else {
            font-family: map.get($font, "font");
        }
    }

    @if not map.has-key($overrides, "line-height") {
        line-height: map.get($font, "line-height");
    }

    @if not map.has-key($overrides, "font-size") {
        font-size: map.get($font, "size");
    }

    @if not map.has-key($overrides, "letter-spacing") {
        letter-spacing: map.get($font, "tracking");
    }

    @if $overrides {
        @each $property, $value in $overrides {
            #{$property}: "#{$value}";
        }
    }

    @if $prominent {
        font-weight: map.get($font, "weight-prominent");
    } @else {
        font-weight: map.get($font, "weight");
    }
}

@mixin hidden() {
    position: absolute !important;
    top: -9999px !important;
    left: -9999px !important;
    bottom: auto;
    right: auto;
}

@mixin indicator($color, $primary: false) {
    $height: sys("state", "focus-indicator", "thickness");

    @if $primary {
        $radius: sys("shape", "corner", "full");

        &::after {
            content: "";
            height: $height;
            display: block;
            border-radius: $radius $radius 0 0;
            background-color: $color;
            min-width: 24px;
            margin: 0 2px;
        }
    } @else {
        box-shadow: inset 0 $height * -1 0 0 $color;
    }
}

@mixin mix-colors($default, $states) {
    color: $states;
    background-color: $default;

    &:hover {
        background-color: color.mix(
            $default,
            $states,
            opacity(sys("state", "hover", "state-layer-opacity"))
        );
    }

    &:focus {
        background-color: color.mix(
            $default,
            $states,
            opacity(sys("state", "focus", "state-layer-opacity"))
        );
    }

    &:active {
        background-color: color.mix(
            $default,
            $states,
            opacity(sys("state", "pressed", "state-layer-opacity"))
        );
    }
}

@mixin mix-states($background, $mix, $set-color, $set-state-color, $states...) {
    @if list.length($states) == 0 {
        $states: "hover", "focus", "active";
    }

    background-color: $background;

    @if $set-color {
        color: $mix;
    }

    @each $state in $states {
        &:#{$state} {
            @if $set-state-color {
                color: $mix;
            }

            background-color: mix-color($background, $mix, $state);
        }
    }
}

@mixin side-radius($side, $value) {
    @if $side == "left" {
        border-top-left-radius: #{$value};
        border-bottom-left-radius: #{$value};
    } @else if $side == "right" {
        border-top-right-radius: #{$value};
        border-bottom-right-radius: #{$value};
    } @else if $side == "top" {
        border-top-left-radius: #{$value};
        border-top-right-radius: #{$value};
    } @else if $side == "bottom" {
        border-bottom-left-radius: #{$value};
        border-bottom-right-radius: #{$value};
    }
}

@mixin square($size) {
    width: $size;
    height: $size;
    line-height: $size;
}

@mixin enabled-styling($disabled-overrides: ()) {
    &:disabled {
        @if not map.has-key($disabled-overrides, "background-color") {
            background-color: rgba(
                themes.color("on-surface"),
                sys("state", "disabled", "container-opacity")
            );
        }

        @if not map.has-key($disabled-overrides, "color") {
            color: rgba(
                themes.color("on-surface"),
                sys("state", "disabled", "label-opacity")
            );
        }

        @if $disabled-overrides {
            @each $property, $value in $disabled-overrides {
                #{$property}: #{$value};
            }
        }
    }

    &:not(:disabled) {
        @content;
    }
}
