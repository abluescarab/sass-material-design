/// ============================================================================
/// @file           Project wide mixin declarations.
/// ============================================================================

@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "functions" as *;
@use "sys" as *;
@use "ref" as *;
@use "../themes";

/// Adds background data attributes for container colors.
@mixin container-backgrounds {
    $backgrounds: (
        "primary": "primary-container",
        "secondary": "secondary-container",
        "tertiary": "tertiary-container",
        "error": "error-container",
        "surface": "surface",
        "surface-container": "surface-container",
    );

    @each $name, $value in $backgrounds {
        &[data-md-background="#{$name}"] {
            @include themes.colorify($value);
        }
    }
}

/// Adds a divider from the Material Design specs.
@mixin divider {
    border-bottom: 1px solid themes.color("outline-variant");
}

/// Adds a box shadow to an element to indicate elevation.
/// @param {number} $elevation elevation level
@mixin elevation($elevation) {
    $offset: sys("elevation", "level#{$elevation}");

    box-shadow: rgba(themes.color("shadow"), 0.2) 0 $offset
        math.floor($offset * 1.5) 0;
}

/// Adds separate styles when an element is enabled or disabled.
/// @param {map} $disabled-overrides [()] styles to override for the :disabled pseudo-class
/// @content styles to apply when the element is not disabled
@mixin enabled-styling($disabled-overrides: ()) {
    &:disabled {
        @if not map.has-key($disabled-overrides, "background-color") {
            background-color: opacity(themes.color("on-surface"), "container");
        }

        @if not map.has-key($disabled-overrides, "color") {
            color: opacity(themes.color("on-surface"), "label");
        }

        @if $disabled-overrides {
            @each $property, $value in $disabled-overrides {
                #{$property}: #{$value};
            }
        }
    }

    &:not(:disabled) {
        @content;
    }
}

/// Adds a font style from the sys map.
/// @param {string} $typescale typescale from sys
/// @param {Boolean} $prominent [false] whether to use the "prominent" style
/// @param {Boolean} $mono [false] whether to use a monospace font
/// @param {map} $overrides [()] properties to override in each font
@mixin font-styling(
    $typescale,
    $prominent: false,
    $mono: false,
    $overrides: ()
) {
    $font: sys("typescale", $typescale);

    @if not map.has-key($overrides, "font-family") {
        @if $mono {
            font-family: "#{ref("typeface", "mono")}";
        } @else {
            font-family: map.get($font, "font");
        }
    }

    @if not map.has-key($overrides, "line-height") {
        line-height: map.get($font, "line-height");
    }

    @if not map.has-key($overrides, "font-size") {
        font-size: map.get($font, "size");
    }

    @if not map.has-key($overrides, "letter-spacing") {
        letter-spacing: map.get($font, "tracking");
    }

    @if $overrides {
        @each $property, $value in $overrides {
            #{$property}: "#{$value}";
        }
    }

    @if $prominent {
        font-weight: map.get($font, "weight-prominent");
    } @else {
        font-weight: map.get($font, "weight");
    }
}

/// Changes the appearance of an element based on the number of children it has.
/// @param {number} $count number of children
@mixin has-children($count) {
    &:has(> :last-child:nth-child(#{$count})) {
        @content;
    }
}

/// Hides an element.
@mixin hidden($relative: false) {
    $offset: -99999px;

    position: if($relative, relative, absolute) !important;
    inset: $offset auto auto $offset !important;
}

/// Adds an indicator to the current element.
/// @param {color} $color indicator color
/// @param {Boolean} $primary [false] whether indicator has "primary" style
@mixin indicator($color, $primary: false) {
    $height: sys("state", "focus-indicator", "thickness");

    @if $primary {
        $radius: sys("shape", "corner", "full");

        &::after {
            content: "";
            height: $height;
            display: block;
            border-radius: $radius $radius 0 0;
            background-color: $color;
            min-width: 24px;
            margin: 0 2px;
        }
    } @else {
        box-shadow: inset 0 $height * -1 0 0 $color;
    }
}

/// Mixes background colors for the hover, focus, and active states.
/// @param {color} $default-color color when no state is active
/// @param {color} $state-color color to apply to all states
@mixin mix-colors($default-color, $state-color) {
    color: $state-color;
    background-color: $default-color;

    @each $state in hover, focus, active {
        &#{$state} {
            background-color: color.mix(
                $default-color,
                $state-color,
                opacity(sys("state", $state, "state-layer-opacity"))
            );
        }
    }
}

/// Mixes the background color for an element with the hover, focus, or active states.
/// @param {color} $background background color when no state is active
/// @param {color} $mix color to mix with the background when a state is active
/// @param {Boolean} $set-color whether to set the default text color
/// @param {Boolean} $set-state-color whether to set the text color for all states
/// @param {strings} $states [hover, focus, active] states to include
/// @output
@mixin mix-states($background, $mix, $set-color, $set-state-color, $states...) {
    @if list.length($states) == 0 {
        $states: "hover", "focus", "active";
    }

    background-color: $background;

    @if $set-color {
        color: $mix;
    }

    @each $state in $states {
        &:#{$state} {
            @if $set-state-color {
                color: $mix;
            }

            background-color: mix-color($background, $mix, $state);
        }
    }
}

/// Adds a border radius to one side of an element.
/// @param {string} $side side to add to (left, right, top, bottom)
/// @param {unit} $radius radius amount
@mixin side-radius($side, $radius) {
    @if $side == "left" {
        border-radius: $radius 0 0 $radius;
    } @else if $side == "top" {
        border-radius: $radius $radius 0 0;
    } @else if $side == "right" {
        border-radius: 0 $radius $radius 0;
    } @else if $side == "bottom" {
        border-radius: 0 0 $radius $radius;
    }
}

/// Makes an element square with width, height, and line-height.
/// @param {any} $size width and height to apply
@mixin square($size, $set-font-size: false) {
    width: $size;
    height: $size;
    line-height: $size;

    @if $set-font-size {
        font-size: $size;
    }
}
