/// ============================================================================
/// @file           abstracts/_functions.scss
/// @description    Project wide function declarations.
/// ============================================================================

@use "sass:color";
@use "sass:list";
@use "sys" as *;

/// Creates a list of numbers.
/// @param {number} $start first number, inclusive
/// @param {number} $end last number, inclusive
/// @param {number} $step difference between each number
/// @param {String} $prefix [""] prefix to add to each list item
/// @param {String} $suffix [""] suffix to add to each list item
/// @return {list} list of numbers from start to end, inclusive
@function create-list($start, $end, $step, $prefix: "", $suffix: "") {
    $list: null;
    $i: $start;

    @while $i <= $end {
        $value: #{$prefix}#{$i}#{$suffix};

        @if not $list {
            $list: $value;
        } @else {
            $list: list.append($list, $value);
        }

        $i: $i + $step;
    }

    @return $list;
}

/// Mixes a color with an opacity value from sys.
/// @param {color} $default default color to mix
/// @param {color} $mix color to mix with default
/// @param {string} $state state to mix color for
/// @return {color} mixed color
@function mix-color($default, $mix, $state) {
    $state-name: $state;

    @if $state-name == "active" {
        $state-name: "pressed";
    }

    @return color.mix(
        $default,
        $mix,
        100% - sys("state", $state-name, "state-layer-opacity")
    );
}

/// Gets a color modified by an opacity value from sys.state.disabled.
/// @param {color} $color color to mix
/// @param {string} $opacity-type container, label, or outline
/// @return {color} color set to the given opacity
@function opacity($color, $opacity-type) {
    @return rgba($color, sys("state", "disabled", "#{$opacity-type}-opacity"));
}
